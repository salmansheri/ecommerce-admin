// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]

  billboards Billboard[] @relation("StoreToBillboards")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
}

model Billboard {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store      Store      @relation("StoreToBillboards", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  billboardId String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade)
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  store     Store    @relation("StoreToSize", fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@index([storeId])
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store    @relation("StoreToProduct", fields: [storeId], references: [id], onDelete: Cascade)
  categoryId  String   @db.ObjectId
  category    Category @relation("CategoryToProduct", fields: [categoryId], references: [id], onDelete: Cascade)
  name        String
  price       Int
  isFeatured  Boolean  @default(false)
  isArchieved Boolean  @default(false)
  sizeId      String   @db.ObjectId
  size        Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  colorId     String   @db.ObjectId
  color       Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  images      Image[]
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
